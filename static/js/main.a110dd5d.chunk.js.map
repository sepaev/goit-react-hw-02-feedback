{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.styled.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Statistics/Statistics.styled.jsx","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","components/Statistics/Statistics.jsx","components/App.js","index.js"],"names":["FeedbackButtonBtn","styled","button","NameSpan","span","ListDiv","div","ItemButtonLi","li","FeedbackOptions","options","onLeaveFeedback","map","option","type","id","onClick","SectionStyled","section","TitleH1","h1","Section","title","children","ItemLi","ItemP","p","TitleH2","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","App","state","countPositiveFeedback","result","parseInt","toFixed","countTotalFeedback","Object","values","reduce","counter","value","e","key","target","setState","prevState","this","keys","Component","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a110dd5d.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const FeedbackButtonBtn = styled.button`\n  background-color: antiquewhite;\n  padding: 10px;\n  min-width: 150px;\n  height: 50px;\n  font-size: 18px;\n  margin: 20px;\n  border-radius: 20px;\n  filter: drop-shadow(2px 4px 6px black);\n`;\n\nexport const NameSpan = styled.span`\n  display: block;\n  text-transform: capitalize;\n  pointer-events: none;\n  font-weight: 500;\n  font-size: 18px;\n`;\n\nexport const ListDiv = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n`;\n\nexport const ItemButtonLi = styled.li`\n  list-style: none;\n  margin: 5px;\n`;\n","import PropTypes from 'prop-types';\nimport { FeedbackButtonBtn, NameSpan, ListDiv, ItemButtonLi } from './FeedbackOptions.styled';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <ListDiv>\n      {options.map(option => (\n        <ItemButtonLi key={option}>\n          <FeedbackButtonBtn type='button' id={option} onClick={onLeaveFeedback}>\n            <NameSpan>{option}</NameSpan>\n          </FeedbackButtonBtn>\n        </ItemButtonLi>\n      ))}\n    </ListDiv>\n  );\n};\nexport default FeedbackOptions;\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(PropTypes.oneOf(['good', 'neutral', 'bad'])).isRequired,\n};\n","import styled from \"@emotion/styled\";\n\nexport const SectionStyled = styled.section`\n  width: 50%;\n  margin: auto;\n  text-align: center;\n`;\n\nexport const TitleH1 = styled.h1`\n  color: tomato;\n  font-size: 40px;\n  margin-bottom: 50px;\n`;\n","import { SectionStyled, TitleH1 } from './Section.styled';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <SectionStyled>\n      <TitleH1>{title}</TitleH1>\n      {children}\n    </SectionStyled>\n  );\n};\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const ListDiv = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n`;\n\nexport const ItemLi = styled.li`\n  list-style: none;\n  margin: 5px;\n  background-color: lightgray;\n  border: 2px solid grey;\n  min-width: 120px;\n  font-size: 18px;\n  width: auto;\n`;\n\nexport const ItemP = styled.p`\n  padding: 10px;\n  margin: 0 20px;\n  font-weight: 700;\n  font-size: 28px;\n`;\n\nexport const NameSpan = styled.span`\n  display: block;\n  pointer-events: none;\n  font-weight: 500;\n`;\n","import styled from \"@emotion/styled\";\n\nexport const SectionStyled = styled.section`\n  width: 50%;\n  margin: auto;\n  text-align: center;\n`;\n\nexport const TitleH2 = styled.h1`\n  color: teal;\n  font-size: 30px;\n  margin-bottom: 50px;\n`;\n","import { SectionStyled, TitleH2 } from \"./Notification.styled\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => {\n  return (\n    <SectionStyled>\n      <TitleH2>{message}</TitleH2>\n    </SectionStyled>\n  );\n};\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { ItemLi, ItemP, ListDiv, NameSpan } from './Statistics.styled';\nimport Notification from '../Notification/Notification';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      {total > 0 && (\n        <ListDiv>\n          <ItemLi key='1'>\n            <ItemP>\n              Good: <NameSpan>{good}</NameSpan>\n            </ItemP>\n          </ItemLi>\n          <ItemLi key='2'>\n            <ItemP>\n              Neutral: <NameSpan>{neutral}</NameSpan>\n            </ItemP>\n          </ItemLi>\n          <ItemLi key='3'>\n            <ItemP>\n              Bad: <NameSpan>{bad}</NameSpan>\n            </ItemP>\n          </ItemLi>\n          <ItemLi key='4'>\n            <ItemP>\n              Total: <NameSpan>{total}</NameSpan>\n            </ItemP>\n          </ItemLi>\n          <ItemLi key='5'>\n            <ItemP>\n              Positive precentage: <NameSpan>{positivePercentage}%</NameSpan>\n            </ItemP>\n          </ItemLi>\n        </ListDiv>\n      )}\n      {total === 0 && <Notification message='No feedback' />}\n    </>\n  );\n};\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","import { Component} from 'react';\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\nimport Section from './Section/Section';\nimport Statistics from './Statistics/Statistics';\n\nexport class App extends Component {\n  state = { good: 0, neutral: 0, bad: 0 };\n\n  countPositiveFeedback = (total, good) => {\n    const result = (parseInt(good) * 100) / total;\n    return total ? parseInt(result.toFixed(0)) : 0;\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((counter, value) => (counter += value), 0);\n  };\n\n  onLeaveFeedback = e => {\n    const key = e.target.id;\n    this.setState(prevState => {\n      return { [key]: ++prevState[key] };\n    });\n  };\n\n  render() {\n    const { good, bad, neutral } = this.state;\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedback(total, good);\n    return (\n      <>\n        <Section title='Please leave feedback'>\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n        <hr />\n        <Section title='Statistics'>\n          <Statistics\n            good={good}\n            bad={bad}\n            neutral={neutral}\n            total={total}\n            positivePercentage={positivePercentage}\n          />\n        </Section>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { App } from \"./components/App\";\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}